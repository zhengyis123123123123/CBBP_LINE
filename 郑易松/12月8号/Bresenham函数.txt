// 宋飞飞提供算法
Point* CalculateBresenham(int startX, int startY, int endX, int endY) {
	// Find Delta
	float dx = endX - startX;
	float dy = endY - startY;
	// Find Signs
	int sx = (dx >= 0) ? 1 : (-1);
	int sy = (dy >= 0) ? 1 : (-1);
	// Get Initial Points
	int x = startX;
	int y = startY;
	// Flag to check if swapping happens
	int isSwaped = 0;
	// Swap if needed
	if (abs(dy) > abs(dx))
	{
		// swap dx and dy
		float tdx = dx;
		dx = dy;
		dy = tdx;
		isSwaped = 1;
	}
	// Decision parameter
	float p = 2 * (abs(dy)) - abs(dx);
	logger.TraceInfo("起点 %d %d", x, y);
	Point* HeadLine = new Point(x,y,-1);
	Point* CurLine = HeadLine;
	// Loop for dx times
	for (int i = 0; i <= abs(dx); i++)
	{
		// Depending on decision parameter
		if (p < 0)
		{
			if (isSwaped == 0) {
				x = x + sx;
				// Add the Node
				logger.TraceInfo("点 %d %d", x, y);
				Point* NodeLine = new Point(x, y, -1);
				CurLine->next = NodeLine;
				CurLine = CurLine->next;
			}
			else {
				y = y + sy;
				//Add the Node
				logger.TraceInfo("点 %d %d", x, y);
				Point* NodeLine = new Point(x, y, -1);
				CurLine->next = NodeLine;
				CurLine = CurLine->next;
			}
			p = p + 2 * abs(dy);
		}
		else
		{
			x = x + sx;
			y = y + sy;
			//Add the Node
			logger.TraceInfo("点 %d %d", x, y);
			Point* NodeLine = new Point(x, y, -1);
			CurLine->next = NodeLine;
			CurLine = CurLine->next;
			p = p + 2 * abs(dy) - 2 * abs(dx);
		}
	}
	return HeadLine;
}